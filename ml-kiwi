#!/usr/bin/env python3
"""Compute interpolating polynomial for kiwi.com machine learning weekend."""

import logging
import sys

import click
import daiquiri

from ml_kiwi import Defaults, DataSource, do_interpolate, do_plot, json_dump

daiquiri.setup(level=logging.INFO)
_logger = daiquiri.getLogger('ml_kiwi')


@click.command()
@click.option('-i', '--input', type=click.Path(exists=True, file_okay=True, dir_okay=False),
              help="Input file to be used - if omitted, remote API is called to retrieve values.")
@click.option('-o', '--output', type=click.Path(dir_okay=False, writable=True),
              help="Output file to be used - if omitted, defaults to stdout).")
@click.option('--output-image', type=click.Path(dir_okay=False, writable=True), default=None,
              help="Output file where interpolation image should be stored.")
@click.option('--max-degree', type=click.INT, default=Defaults.MAX_DEGREE,
              help="Maximal degree of fitting polynomial (default: %d)." % Defaults.MAX_DEGREE)
@click.option('--min-degree', type=click.INT, default=Defaults.MIN_DEGREE,
              help="Minimal degree of fitting polynomial (default: %d)" % Defaults.MIN_DEGREE)
@click.option('--x-from', type=click.FLOAT, default=Defaults.X_FROM,
              help="Value on x axis to start with data gathering "
                   "from API (default: %f)." % Defaults.X_FROM)
@click.option('--x-to', type=click.FLOAT, default=Defaults.X_TO,
              help="Value on x axis that shouldn't be reached when gathering data "
                   "from API (default: %f)." % Defaults.X_TO)
@click.option('--x-step', type=click.FLOAT, default=Defaults.X_STEP,
              help="Step on x axis to start "
                   "with (default: %f)." % Defaults.X_STEP)
@click.option('-v', '--verbose', is_flag=True,
              help="Turn on debug messages.")
@click.option('--no-pretty', is_flag=True,
              help="Turn off pretty formatted output.")
@click.option('--no-show-plot', is_flag=True,
              help="Do not show plot results.")
def main(input=None, output=None, max_degree=None, min_degree=None,
         x_from=None, x_to=None, x_step=None, no_pretty=True, verbose=False,
         no_show_plot=False, output_image=None):
    # pylint: disable=too-many-arguments,redefined-builtin
    """Compute degree of polynomial for kiwi.com's weekend machine learning session."""
    if verbose:
        _logger.setLevel(logging.DEBUG)
        _logger.debug("Verbose mode turned on, passed arguments: %s.", locals())

    x_values, y_values = DataSource().get_data_file(input) if input \
        else DataSource().get_data_api(x_from, x_to, x_step)

    _logger.debug("Computing interpolating polynomial (min degree: %d, max_degree: %d)", min_degree, max_degree)
    best, results = do_interpolate(x_values, y_values, min_degree, max_degree)

    if not results:
        _logger.error("No results available, giving up...")
        return 1

    _logger.debug("Dumping results to '%s'" % output if output else sys.stdout.name)
    json_dump({
        'best_result': best,
        'all_results': results,
        'x': x_values,
        'y': y_values
    }, output, pretty=not no_pretty)

    if not no_show_plot or output_image:
        _logger.debug("Plotting results...")
        do_plot(x_values, y_values, best['coefficients'],
                output_image=output_image, show_plot=not no_show_plot)


if __name__ == '__main__':
    sys.exit(main())
